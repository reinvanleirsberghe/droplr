function showErrors(a){$(".alert-ajax").show(),$.each(a,function(a,n){$(".alert-ajax").find("ul").append("<li>"+n+"</li>")})}
function drawRoute(){var e=0,a=-1;map.removePolylines();var r=$("#drop_list li");r.each(function(r,t){var o=$(t).data("marker-index");if(-1!==a){var n=map.markers[o].getPosition(),s=n.lat(),l=n.lng(),i=map.markers[a].getPosition(),c=i.lat(),d=i.lng(),m=new google.maps.LatLng(s,l),p=new google.maps.LatLng(c,d);map.drawPolyline({path:[m,p],strokeColor:"##FF0000",strokeOpacity:1,strokeWeight:2}),e+=google.maps.geometry.spherical.computeDistanceBetween(m,p)}a=o}),$("#drop_list li").mouseenter(function(){var e=$(this).data("marker-index"),a=map.markers[e];a.setIcon(iconHover)}).mouseleave(function(){var e=$(this).data("marker-index"),a=map.markers[e];a.setIcon(iconDefault)})}function listMarkers(e,a,r,t,o){dropList.append('<li id="marker-id-'+t+'" class="marker-list-item'+e+'" data-marker-index="'+e+'"><a href="javascript:;" class="marker-list-a" data-marker-id="'+t+'">'+o+'</a><i class="fa fa-sort pull-right"></i><a href="#" class="delete-marker" data-marker-id="'+t+'" data-marker-index="'+e+'"><i class="glyphicon glyphicon-remove pull-right"></i><a href="#" class="goto-marker" data-marker-lat="'+a+'" data-marker-lng="'+r+'" data-marker-index="'+e+'"><i class="fa fa-eye pull-right"></i></a></li>'),dropList.sortable({axis:"y",update:function(){loader.show();var e=$(this).sortable("serialize");$.ajax({type:"POST",url:"/drops/sortmarkers/"+Boilerplate.currentDropId,processData:!1,cache:!1,dataType:"json",data:e,success:function(e){e.success&&(loader.hide(),drawRoute())},error:function(e){console.log(e)}})}}),markersAmount.val($("#drop_list li").length),$(".marker-list-a").click(function(){var e=$(this).data("marker-id");showMarker(e)})}function addMarker(e,a,r,t){var o=map.addMarker({lat:a,lng:r,draggable:!0,icon:iconDefault,title:"Marker #"+e});o.set("id",t),GMaps.on("click",o,function(){showMarker(o.id)}),GMaps.on("dragend",o,function(e){loader.show();var a=o.id,r=new FormData;r.append("lat",e.latLng.lat()),r.append("lng",e.latLng.lng()),$.ajax({method:"POST",url:"/marker/updatelatlng/"+a,processData:!1,contentType:!1,cache:!1,dataType:"json",data:r,success:function(e){1==e.success&&(loader.hide(),drawRoute())},error:function(e){console.log("Marker could not be updated:"+e)}})}),drawRoute()}function showMarker(e){$.ajax({type:"GET",url:"/marker/show/"+e,processData:!1,contentType:!1,cache:!1,dataType:"json",success:function(e){e.success&&($("#modalMarker .modal-body").html(e.view),eventContent=$("#event-content"),$("#event").change(function(){$(this).prop("checked")?eventContent.show():eventContent.hide()}),$("#modalMarker").modal("show"))},error:function(e){console.log("Marker could not be shown: "+e)}})}$(document).ready(function(){dropList=$("#drop_list"),markersAmount=$("#markers_amount"),iconDefault="http://maps.google.com/mapfiles/ms/icons/red-dot.png",iconHover="http://maps.google.com/mapfiles/ms/icons/blue-dot.png",loader=$(".map_loader"),map=new GMaps({div:"#drop_map",zoom:15,lat:Boilerplate.currentDropLat,lng:Boilerplate.currentDropLng});var e=Boilerplate.currentDropMarkers;e&&$(e).each(function(){var e=map.markers.length,a=$(this)[0].lat,r=$(this)[0].lng,t=$(this)[0].id;listMarkers(e,a,r,$(this)[0].id,$(this)[0].name),addMarker(e,a,r,t)}),GMaps.on("click",map.map,function(e){loader.show();var a=map.markers.length,r=e.latLng.lat(),t=e.latLng.lng(),o=new FormData;o.append("name","Marker "+(a+1)),o.append("lat",r),o.append("lng",t),o.append("dropId",Boilerplate.currentDropId),$.ajax({type:"POST",url:"/marker/add",processData:!1,contentType:!1,cache:!1,dataType:"json",data:o,success:function(e){e.success&&(loader.hide(),addMarker(a,r,t,e.marker.id),listMarkers(a,r,t,e.marker.id,e.marker.name),drawRoute())},error:function(e){console.log("Marker could not be created: "+e)}})}),$(document).on("click",".goto-marker",function(e){e.preventDefault();var a,r,t=$(this).data("marker-index"),o=map.markers[t].getPosition();a=o.lat(),r=o.lng(),map.setCenter(a,r)}),$(document).on("click",".delete-marker",function(e){loader.show(),e.preventDefault();var a=$(this).data("marker-id"),r=$(this).data("marker-index"),t=map.markers[r];$.ajax({type:"DELETE",url:"/marker/delete/"+a,processData:!1,contentType:!1,cache:!1,dataType:"json",success:function(e){e.success&&(loader.hide(),t.setMap(null),$(".marker-list-item"+r).remove(),markersAmount.val($("#drop_list li").length),drawRoute())},error:function(e){console.log("Marker could not be removed: "+e)}})}),$("#marker-submit").click(function(){var e=$("#current_marker").val(),a=0;$("#event").prop("checked")&&(a=1);var r=new FormData;r.append("name",$("#name").val()),r.append("hasEvent",a),$.ajax({method:"POST",url:"/marker/updateinfo/"+e,processData:!1,contentType:!1,cache:!1,dataType:"json",data:r,success:function(a){console.log(a),a.success?($("#marker-id-"+e+" .marker-list-a").html(a.marker.name),$(".alert-ajax").hide().find("ul").empty(),$("#modalMarker").modal("hide")):showErrors(a.errors)},error:function(e){console.log("Marker could not be updated the info:"+e)}})})});
!function(t,i,e,o){function s(i,e){this.options=t.extend(!0,{},n,e),this.input=i,this.$input=t(i),this._defaults=n,this._name="geocomplete",this.init()}var n={bounds:!0,country:null,map:!1,details:!1,detailsAttribute:"name",autoselect:!0,location:!1,mapOptions:{zoom:14,scrollwheel:!1,mapTypeId:"roadmap"},markerOptions:{draggable:!1},maxZoom:16,types:["geocode"],blur:!1},a="street_address route intersection political country administrative_area_level_1 administrative_area_level_2 administrative_area_level_3 colloquial_area locality sublocality neighborhood premise subpremise postal_code natural_feature airport park point_of_interest post_box street_number floor room lat lng viewport location formatted_address location_type bounds".split(" "),r="id place_id url website vicinity reference name rating international_phone_number icon formatted_phone_number".split(" ");t.extend(s.prototype,{init:function(){this.initMap(),this.initMarker(),this.initGeocoder(),this.initDetails(),this.initLocation()},initMap:function(){if(this.options.map){if("function"==typeof this.options.map.setCenter)return void(this.map=this.options.map);this.map=new google.maps.Map(t(this.options.map)[0],this.options.mapOptions),google.maps.event.addListener(this.map,"click",t.proxy(this.mapClicked,this)),google.maps.event.addListener(this.map,"zoom_changed",t.proxy(this.mapZoomed,this))}},initMarker:function(){if(this.map){var i=t.extend(this.options.markerOptions,{map:this.map});i.disabled||(this.marker=new google.maps.Marker(i),google.maps.event.addListener(this.marker,"dragend",t.proxy(this.markerDragged,this)))}},initGeocoder:function(){var i={types:this.options.types,bounds:this.options.bounds===!0?null:this.options.bounds,componentRestrictions:this.options.componentRestrictions};this.options.country&&(i.componentRestrictions={country:this.options.country}),this.autocomplete=new google.maps.places.Autocomplete(this.input,i),this.geocoder=new google.maps.Geocoder,this.map&&this.options.bounds===!0&&this.autocomplete.bindTo("bounds",this.map),google.maps.event.addListener(this.autocomplete,"place_changed",t.proxy(this.placeChanged,this)),this.$input.keypress(function(t){return 13===t.keyCode?!1:void 0}),this.$input.bind("geocode",t.proxy(function(){this.find()},this)),this.options.blur===!0&&this.$input.blur(t.proxy(function(){this.find()},this))},initDetails:function(){function i(t){s[t]=e.find("["+o+"="+t+"]")}if(this.options.details){var e=t(this.options.details),o=this.options.detailsAttribute,s={};t.each(a,function(t,e){i(e),i(e+"_short")}),t.each(r,function(t,e){i(e)}),this.$details=e,this.details=s}},initLocation:function(){var t,i=this.options.location;if(i){if("string"==typeof i)return void this.find(i);i instanceof Array&&(t=new google.maps.LatLng(i[0],i[1])),i instanceof google.maps.LatLng&&(t=i),t&&(this.map&&this.map.setCenter(t),this.marker&&this.marker.setPosition(t))}},find:function(t){this.geocode({address:t||this.$input.val()})},geocode:function(i){this.options.bounds&&!i.bounds&&(i.bounds=this.options.bounds===!0?this.map&&this.map.getBounds():this.options.bounds),this.options.country&&(i.region=this.options.country),this.geocoder.geocode(i,t.proxy(this.handleGeocode,this))},selectFirstResult:function(){var i="";t(".pac-item-selected")[0]&&(i="-selected");var e=t(".pac-container .pac-item"+i+":first span:nth-child(2)").text(),o=t(".pac-container .pac-item"+i+":first span:nth-child(3)").text(),s=e;return o&&(s+=" - "+o),this.$input.val(s),s},handleGeocode:function(t,i){if(i===google.maps.GeocoderStatus.OK){var e=t[0];this.$input.val(e.formatted_address),this.update(e),t.length>1&&this.trigger("geocode:multiple",t)}else this.trigger("geocode:error",i)},trigger:function(t,i){this.$input.trigger(t,[i])},center:function(t){t.viewport?(this.map.fitBounds(t.viewport),this.map.getZoom()>this.options.maxZoom&&this.map.setZoom(this.options.maxZoom)):(this.map.setZoom(this.options.maxZoom),this.map.setCenter(t.location)),this.marker&&(this.marker.setPosition(t.location),this.marker.setAnimation(this.options.markerOptions.animation))},update:function(t){this.map&&this.center(t.geometry),this.$details&&this.fillDetails(t),this.trigger("geocode:result",t)},fillDetails:function(i){var e={},o=i.geometry,s=o.viewport,n=o.bounds;t.each(i.address_components,function(i,o){o.types[0];t.each(o.types,function(t,i){e[i]=o.long_name,e[i+"_short"]=o.short_name})}),t.each(r,function(t,o){e[o]=i[o]}),t.extend(e,{formatted_address:i.formatted_address,location_type:o.location_type||"PLACES",viewport:s,bounds:n,location:o.location,lat:o.location.lat(),lng:o.location.lng()}),t.each(this.details,t.proxy(function(t,i){var o=e[t];this.setDetail(i,o)},this)),this.data=e},setDetail:function(t,i){i===o?i="":"function"==typeof i.toUrlValue&&(i=i.toUrlValue()),t.is(":input")?t.val(i):t.text(i)},markerDragged:function(t){this.trigger("geocode:dragged",t.latLng)},mapClicked:function(t){this.trigger("geocode:click",t.latLng)},mapZoomed:function(){this.trigger("geocode:zoom",this.map.getZoom())},resetMarker:function(){this.marker.setPosition(this.data.location),this.setDetail(this.details.lat,this.data.location.lat()),this.setDetail(this.details.lng,this.data.location.lng())},placeChanged:function(){var t=this.autocomplete.getPlace();if(t&&t.geometry)this.update(t);else if(this.options.autoselect){var i=this.selectFirstResult();this.find(i)}}}),t.fn.geocomplete=function(i){var e="plugin_geocomplete";if("string"==typeof i){var o=t(this).data(e)||t(this).geocomplete().data(e),n=o[i];return"function"==typeof n?(n.apply(o,Array.prototype.slice.call(arguments,1)),t(this)):(2==arguments.length&&(n=arguments[1]),n)}return this.each(function(){var o=t.data(this,e);o||(o=new s(this,i),t.data(this,e,o))})}}(jQuery,window,document);
//# sourceMappingURL=data:application/json;base64,