function showErrors(a){$(".alert-ajax").show(),$.each(a,function(a,n){$(".alert-ajax").find("ul").append("<li>"+n+"</li>")})}
function drawRoute(){var a=0,e=-1;map.removePolylines();var r=$("#drop_list li");r.each(function(r,t){var o=$(t).data("marker-index");if(-1!==e){var n=map.markers[o].getPosition(),s=n.lat(),l=n.lng(),i=map.markers[e].getPosition(),c=i.lat(),d=i.lng(),m=new google.maps.LatLng(s,l),p=new google.maps.LatLng(c,d);map.drawPolyline({path:[m,p],strokeColor:"##FF0000",strokeOpacity:1,strokeWeight:2}),a+=google.maps.geometry.spherical.computeDistanceBetween(m,p)}e=o}),$("#drop_list li").mouseenter(function(){var a=$(this).data("marker-index"),e=map.markers[a];e.setIcon(iconHover)}).mouseleave(function(){var a=$(this).data("marker-index"),e=map.markers[a];e.setIcon(iconDefault)})}function listMarkers(a,e,r,t,o){dropList.append('<li id="marker-id-'+t+'" class="marker-list-item'+a+'" data-marker-index="'+a+'"><a href="javascript:;" class="marker-list-a" data-marker-id="'+t+'">'+o+'</a><i class="fa fa-sort pull-right"></i><a href="#" class="delete-marker" data-marker-id="'+t+'" data-marker-index="'+a+'"><i class="glyphicon glyphicon-remove pull-right"></i><a href="#" class="goto-marker" data-marker-lat="'+e+'" data-marker-lng="'+r+'" data-marker-index="'+a+'"><i class="fa fa-eye pull-right"></i></a></li>'),dropList.sortable({axis:"y",update:function(){loader.show();var a=$(this).sortable("serialize");$.ajax({type:"POST",url:"/drops/sortmarkers/"+Boilerplate.currentDropId,processData:!1,cache:!1,dataType:"json",data:a,success:function(a){a.success&&(loader.hide(),drawRoute())},error:function(a){console.log(a)}})}}),markersAmount.val($("#drop_list li").length),$(".marker-list-a").click(function(){var a=$(this).data("marker-id");showMarker(a)})}function addMarker(a,e,r,t){var o=map.addMarker({lat:e,lng:r,draggable:!0,icon:iconDefault,title:"Marker #"+a});o.set("id",t),GMaps.on("click",o,function(){showMarker(o.id)}),GMaps.on("dragend",o,function(a){loader.show();var e=o.id,r=new FormData;r.append("lat",a.latLng.lat()),r.append("lng",a.latLng.lng()),$.ajax({method:"POST",url:"/marker/updatelatlng/"+e,processData:!1,contentType:!1,cache:!1,dataType:"json",data:r,success:function(a){1==a.success&&(loader.hide(),drawRoute())},error:function(a){console.log("Marker could not be updated:"+a)}})}),drawRoute()}function showMarker(a){$.ajax({type:"GET",url:"/marker/show/"+a,processData:!1,contentType:!1,cache:!1,dataType:"json",success:function(a){a.success&&($("#modalMarker .modal-body").html(a.view),eventContent=$("#event-content"),$("#event").change(function(){$(this).prop("checked")?eventContent.show():eventContent.hide()}),$("#modalMarker").modal("show"))},error:function(a){console.log("Marker could not be shown: "+a)}})}$(document).ready(function(){dropList=$("#drop_list"),markersAmount=$("#markers_amount"),iconDefault="http://maps.google.com/mapfiles/ms/icons/red-dot.png",iconHover="http://maps.google.com/mapfiles/ms/icons/blue-dot.png",loader=$(".map_loader"),map=new GMaps({div:"#drop_map",zoom:15,lat:51.1285327,lng:3.304863100000034});var a=Boilerplate.currenDropMarkers;a&&$(a).each(function(){var a=map.markers.length,e=$(this)[0].lat,r=$(this)[0].lng,t=$(this)[0].id;listMarkers(a,e,r,$(this)[0].id,$(this)[0].name),addMarker(a,e,r,t)}),GMaps.on("click",map.map,function(a){loader.show();var e=map.markers.length,r=a.latLng.lat(),t=a.latLng.lng(),o=new FormData;o.append("name","Marker "+(e+1)),o.append("lat",r),o.append("lng",t),o.append("dropId",Boilerplate.currentDropId),$.ajax({type:"POST",url:"/marker/add",processData:!1,contentType:!1,cache:!1,dataType:"json",data:o,success:function(a){a.success&&(loader.hide(),addMarker(e,r,t,a.marker.id),listMarkers(e,r,t,a.marker.id,a.marker.name),drawRoute())},error:function(a){console.log("Marker could not be created: "+a)}})}),$(document).on("click",".goto-marker",function(a){a.preventDefault();var e,r,t=$(this).data("marker-index"),o=map.markers[t].getPosition();e=o.lat(),r=o.lng(),map.setCenter(e,r)}),$(document).on("click",".delete-marker",function(a){loader.show(),a.preventDefault();var e=$(this).data("marker-id"),r=$(this).data("marker-index"),t=map.markers[r];$.ajax({type:"DELETE",url:"/marker/delete/"+e,processData:!1,contentType:!1,cache:!1,dataType:"json",success:function(a){a.success&&(loader.hide(),t.setMap(null),$(".marker-list-item"+r).remove(),markersAmount.val($("#drop_list li").length),drawRoute())},error:function(a){console.log("Marker could not be removed: "+a)}})}),$("#marker-submit").click(function(){var a=$("#current_marker").val(),e=0;$("#event").prop("checked")&&(e=1);var r=new FormData;r.append("name",$("#name").val()),r.append("hasEvent",e),$.ajax({method:"POST",url:"/marker/updateinfo/"+a,processData:!1,contentType:!1,cache:!1,dataType:"json",data:r,success:function(e){console.log(e),e.success?($("#marker-id-"+a+" .marker-list-a").html(e.marker.name),$(".alert-ajax").hide().find("ul").empty(),$("#modalMarker").modal("hide")):showErrors(e.errors)},error:function(a){console.log("Marker could not be updated the info:"+a)}})})});
//# sourceMappingURL=data:application/json;base64,